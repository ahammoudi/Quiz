Question #: 1
A developer needs to provide an application running on an EC2 instance with temporary access to an S3 bucket. What is the most secure way to grant this access without storing long-term credentials on the instance?

A. Create an IAM user, generate access keys, and store them in a configuration file on the EC2 instance.
B. Create an IAM role with the necessary S3 permissions and attach it to the EC2 instance via an instance profile.
C. Embed the AWS root user access keys directly into the application code for simplicity.
D. Create a new IAM user and hardcode its access keys as environment variables on the EC2 instance.

Answer: B

Explanation: Using an IAM role (via an instance profile) is the most secure method. The application automatically receives temporary, rotated credentials through the EC2 metadata service, eliminating the need to store long-term keys on the instance. Option A and D are insecure because they involve storing static, long-term credentials on the instance. Option C is a major security violation; the root user should never be used for application access.

---

Question #: 2
An organization wants to enforce multi-factor authentication (MFA) for all IAM users before they can perform any actions on critical S3 buckets. Which IAM policy element is essential for this requirement?

A. The "Principal" element to specify which users must use MFA.
B. The "Condition" element with the "aws:MultiFactorAuthPresent" key.
C. The "Action" element to list all possible MFA device types.
D. The "Effect" element set to "Allow" for all users.

Answer: B

Explanation: The "Condition" element is used to enforce specific circumstances for a policy. To enforce MFA, you use the condition key "aws:MultiFactorAuthPresent" set to "true" in a Deny policy or "false" in an Allow policy, effectively blocking actions if the user's session wasn't authenticated with MFA. Option A specifies who the policy applies to but doesn't enforce MFA. Options C and D are incorrect elements for this purpose.

---

Question #: 3
A company has a team of database administrators who all require the same level of access to Amazon RDS instances. What is the most efficient way to manage their permissions according to AWS best practices?

A. Create an IAM policy and attach it individually to each administrator's IAM user account.
B. Create a single IAM user account and share the credentials with the entire team.
C. Create an IAM group, attach a single IAM policy to the group, and add all the administrators' IAM users to that group.
D. Create one IAM role for each database administrator.

Answer: C

Explanation: Using an IAM group is the best practice for managing permissions for multiple users with the same job function. You manage one policy for the group, and permissions are automatically inherited by all users in the group. This is more scalable and less error-prone than attaching policies to individual users (A). Sharing credentials (B) is a major security risk. Creating a role for each user (D) is unnecessary overhead; groups are designed for this use case.

---

Question #: 4
What is the fundamental difference between an identity-based policy and a resource-based policy in IAM?

A. Identity-based policies are written in XML, while resource-based policies are written in JSON.
B. Identity-based policies are attached to IAM identities (users, groups, roles), while resource-based policies are attached to resources (like S3 buckets).
C. Identity-based policies can only grant permissions, while resource-based policies can only deny permissions.
D. Only identity-based policies can be managed by AWS.

Answer: B

Explanation: This is the core distinction. Identity-based policies define what an identity can do. Resource-based policies are inline policies attached to a resource (e.g., an S3 bucket or an SQS queue) that specify which principals are allowed to perform actions on that specific resource. Both policy types are written in JSON (A), and both can grant or deny permissions (C). Both can be customer-managed (D).

---

Question #: 5
An IAM user has a policy attached that explicitly allows reading from an S3 bucket. The user is also a member of a group that has a policy attached explicitly denying all S3 actions. What is the effective permission for the user regarding the S3 bucket?

A. The user will be allowed to read from the S3 bucket.
B. The user will be denied all access to the S3 bucket.
C. The user will be prompted to choose which policy to apply.
D. The result is unpredictable and depends on the policy evaluation order.

Answer: B

Explanation: During IAM policy evaluation, an explicit "Deny" always overrides any "Allow". Since the user's group membership includes a policy that denies S3 access, this takes precedence over the user's individual policy that allows it. Therefore, the user will be denied access.

---

Question #: 6
A company needs to grant a third-party auditing firm temporary access to its AWS account to review logging configurations. The auditing firm has its own AWS account. What is the most secure method to provide this access?

A. Create IAM users for the auditors in your account and provide them with long-term access keys.
B. Create an IAM role with the necessary read-only permissions and establish a cross-account trust relationship with the auditor's AWS account.
C. Share your AWS account's root user credentials with the auditing firm.
D. Ask the auditors to create users in their account, and you create a corresponding set of users with matching names in your account.

Answer: B

Explanation: Cross-account role assumption is the designed and most secure method for this scenario. You create a role in your account that trusts the auditor's account ID. The auditors can then assume this role to get temporary credentials with limited permissions, without any long-term users or keys being created in your account. Option A creates long-term credentials which is less secure. Option C is a critical security breach. Option D is not a valid AWS access method.

---

Question #: 7
Which of the following are valid types of IAM policies? (Choose TWO)

A. AWS Managed Policies
B. Service-Linked Policies
C. Inline Policies
D. Account-Level Policies
E. Regional Policies

Answer: A, C

Explanation: AWS provides two main categories of policies you can use: Managed Policies (which include AWS Managed and Customer Managed) and Inline Policies. Managed policies are standalone and can be attached to multiple entities. Inline policies are embedded directly into a single user, group, or role. Service-Linked Policies (B) are a type of managed policy used by services, but "AWS Managed" and "Inline" are the primary user-facing types. D and E are not valid IAM policy types.

---

Question #: 8
What is the primary purpose of IAM roles?

A. To permanently assign permissions to a user.
B. To be a container for IAM users.
C. To be assumed by a trusted entity to obtain temporary security credentials.
D. To define the billing structure for an AWS account.

Answer: C

Explanation: The key feature of an IAM role is that it is not directly associated with a specific person. Instead, it is meant to be assumed by a trusted principal (like an EC2 instance, a Lambda function, a user, or another AWS account) to obtain temporary security credentials for a specific task. Groups are containers for users (B). Policies assign permissions (A). Billing is handled by AWS Billing and Cost Management (D).

---

Question #: 9
A solutions architect is creating an IAM policy and needs to ensure it only applies when requests come from a specific range of IP addresses. Which part of the IAM policy statement should be used?

A. Effect
B. Action
C. Resource
D. Condition

Answer: D

Explanation: The "Condition" block is used to specify circumstances under which a policy is in effect. To restrict access by IP address, you would use the "aws:SourceIp" condition key within the Condition element. The other elements define the effect (Allow/Deny), the action being performed, and the resource being acted upon.

---

Question #: 10
What does MFA (Multi-Factor Authentication) provide for an AWS account?

A. It encrypts all data at rest in the AWS account.
B. It adds an extra layer of security by requiring a second form of authentication.
C. It automatically rotates IAM user access keys.
D. It restricts access to AWS services from specific geographic locations.

Answer: B

Explanation: MFA improves security by requiring users to provide something they know (password) and something they have (a code from a physical or virtual MFA device). This protects against compromised passwords. MFA does not handle encryption (A), key rotation (C), or geoblocking (D), although geoblocking can be achieved using condition keys in IAM policies.

---

Question #: 11
An IAM policy contains no explicit "Allow" statements but has one explicit "Deny" statement for Amazon S3 access. What is the outcome when a user with this policy tries to access S3?

A. Access is allowed because there is no explicit allow.
B. Access is denied because of the explicit deny statement.
C. Access is denied because all permissions are denied by default.
D. The policy is invalid and will cause an error.

Answer: B

Explanation: The IAM evaluation logic states that an explicit "Deny" always takes precedence. Even if there were an "Allow" statement elsewhere, the "Deny" would win. In this case, the explicit "Deny" is sufficient to block access. If there were no explicit deny, access would also be denied because of the default deny (C), but the presence of an explicit deny makes (B) the more precise answer.

---

Question #: 12
You are configuring an application on an EC2 instance that needs to call AWS services. Where does the EC2 instance get its security credentials when using an IAM role?

A. From a credentials file stored in /etc/aws/.
B. From environment variables pre-configured on the instance.
C. From the EC2 instance metadata service at 169.254.169.254.
D. The credentials must be passed to the instance at launch time using user data.

Answer: C

Explanation: When an EC2 instance is associated with an IAM role, the AWS SDKs and CLI on the instance automatically retrieve temporary credentials from the instance metadata service. This is a link-local address accessible only from the instance itself, making it a secure way to obtain credentials without hardcoding them.

---

Question #: 13
What is an IAM "permission boundary"?

A. A policy that defines the geographic boundaries from which a user can access AWS.
B. An advanced feature that uses a managed policy to set the maximum permissions an identity-based policy can grant to an IAM entity.
C. A resource-based policy that defines the boundary of an AWS service.
D. A special policy attached only to the root user to limit its capabilities.

Answer: B

Explanation: A permissions boundary is a mechanism for delegating permissions management. It sets a "boundary" or ceiling on the permissions that an IAM entity (user or role) can have. The entity's effective permissions are the intersection of its identity-based policies and its permissions boundary. It cannot perform actions that are not allowed by BOTH the identity policy and the boundary.

---

Question #: 14
A junior administrator should only be allowed to create new IAM users, but not assign them to groups or create policies. Which AWS managed policy would be the most appropriate starting point, following the principle of least privilege?

A. AdministratorAccess
B. IAMFullAccess
C. IAMUserChangePassword
D. IAMReadOnlyAccess

Answer: B

Explanation: None of the options are perfect, but `IAMFullAccess` is the closest starting point that a senior administrator would likely clone and then restrict. In a real-world scenario, you would create a custom policy. However, of the choices, `IAMFullAccess` grants broad IAM permissions which you would then have to scope down. `AdministratorAccess` (A) is far too permissive. `IAMUserChangePassword` (C) only allows password changes. `IAMReadOnlyAccess` (D) doesn't allow user creation. The question implies a custom policy would be best, but asks for the best starting point among the managed policies. *Correction: A better approach would be to create a custom policy. But among the choices, there is no least-privilege option that allows user creation without other permissions. A custom policy would be the true answer. For exam purposes, you'd recognize the need for a custom policy.* The best exam-style answer, realizing none are perfect, would be to understand you need a custom policy. However, if forced to choose, one might look for a policy to clone and edit, making B a plausible but imperfect choice. A better question would offer a custom policy option. Let's re-evaluate: The goal is to show understanding of least privilege. The correct action is to create a custom policy. Since that's not an option, we identify that none of the managed policies fit the least privilege principle for this specific need.

*Revising the question for clarity.* A better version would be:
Question: An administrator needs to create IAM users but not manage policies or groups. What is the best method?
Answer: Create a custom IAM policy with the `iam:CreateUser` action and attach it to the administrator's user/group.

Given the original options, there isn't a perfect fit, highlighting the importance of custom policies.

---

Question #: 15
Which IAM entity can be used to delegate access between AWS accounts?

A. IAM Group
B. IAM User
C. IAM Role
D. Inline Policy

Answer: C

Explanation: An IAM Role is the primary mechanism for delegating access. For cross-account access, you create a role in the target account and define the source account ID in the role's trust policy as a trusted principal. Users in the source account can then assume this role to access resources in the target account.

---

Question #: 16
What is the purpose of the `sts:AssumeRole` action in an IAM policy?

A. It allows the IAM entity to create new roles.
B. It allows the IAM entity to switch to (assume) an existing role.
C. It allows the IAM entity to delete roles.
D. It allows the IAM entity to modify the trust policy of a role.

Answer: B

Explanation: The `sts:AssumeRole` action is the specific permission required for a principal (user, application, etc.) to obtain temporary credentials by assuming an IAM role. The role being assumed must also have a trust policy that allows the principal to assume it.

---

Question #: 17
A company wants to allow its EC2 instances to upload logs to a specific CloudWatch Logs log group. What combination of IAM components is required? (Choose TWO)

A. An IAM user with CloudWatch Logs permissions.
B. An IAM policy granting `logs:PutLogEvents` permissions.
C. An IAM role for the EC2 instances to assume.
D. An IAM group containing the EC2 instances.
E. An MFA device attached to the EC2 instances.

Answer: B, C

Explanation: The standard and secure practice is to create an IAM role (C) that EC2 instances can assume. This role must have an attached IAM policy (B) that grants the necessary permissions, such as `logs:PutLogEvents`, to write to CloudWatch Logs. IAM users (A) are for people, not resources. EC2 instances cannot be put in IAM groups (D) or have MFA devices (E).

---

Question #: 18
You attach the following policy to an IAM user. What is the effect of this policy?
`{ "Version": "2012-10-17", "Statement": [{ "Effect": "Allow", "Action": "s3:GetObject", "Resource": "arn:aws:s3:::my-secure-bucket/*" }] }`

A. The user can list all objects in the `my-secure-bucket`.
B. The user can download any object from the `my-secure-bucket`.
C. The user can upload objects to the `my-secure-bucket`.
D. The user has full administrative access to the `my-secure-bucket`.

Answer: B

Explanation: The `s3:GetObject` action specifically grants permission to retrieve, or download, objects. It does not grant permission to list objects (`s3:ListBucket`), upload objects (`s3:PutObject`), or perform any other administrative actions.

---

Question #: 19
An organization's security policy requires that all IAM users must change their own password and cannot change it more than once per day. How can a solutions architect enforce this?

A. Use AWS Config to monitor for password changes and revert them if they happen too frequently.
B. Set a password policy for the AWS account that specifies a minimum password age of one day.
C. Create an IAM policy with a condition that checks the time since the last password change.
D. This cannot be enforced in AWS IAM.

Answer: B

Explanation: AWS IAM allows you to set a comprehensive password policy for your account. This policy includes options for minimum password length, required character types, password expiration, preventing password reuse, and setting a minimum password age to prevent rapid changes.

---

Question #: 20
Which statement about the AWS account root user is correct?

A. It is best practice to use the root user for daily administrative tasks.
B. The root user credentials are the email address and password used to create the AWS account.
C. The root user cannot be protected by Multi-Factor Authentication (MFA).
D. By default, the root user has no permissions and must be granted them via an IAM policy.

Answer: B

Explanation: The root user is the identity created when the AWS account is opened, and its credentials are the associated email and password. It is a best practice to NOT use the root user for daily tasks (A) but instead create an administrative IAM user. The root user should always be protected by MFA (C). The root user has full, unrestricted access to all resources in the account by default (D).

---

Question #: 21
An IAM policy has two statements. The first statement allows `s3:GetObject` on a bucket. The second statement denies `s3:*` on the same bucket if the request does not come from a specific VPC endpoint. A user subject to this policy tries to get an object from outside the VPC. What happens?

A. The request is allowed because the `Allow` statement is more specific.
B. The request is denied because the condition in the `Deny` statement is met.
C. The request is allowed because `Deny` statements with conditions are evaluated last.
D. The request fails with a policy evaluation error.

Answer: B

Explanation: The IAM evaluation logic first checks for any explicit `Deny` that matches the context of the request. The user's request is for an S3 action, and it comes from outside the specified VPC endpoint. Therefore, the condition in the `Deny` statement is met, the deny is applied, and the request is blocked. An explicit deny always overrides an allow.

---

Question #: 22
A solutions architect creates an IAM role for a Lambda function. What is this type of role called?

A. A cross-account role.
B. A service-linked role.
C. A service role.
D. An EC2 instance role.

Answer: C

Explanation: A service role is an IAM role that an AWS service assumes to perform actions on your behalf. In this case, the Lambda service assumes the role to get permissions to interact with other AWS services, like writing to a DynamoDB table or reading from an S3 bucket. A service-linked role is a special type of service role that is predefined by and linked to a specific service.

---

Question #: 23
What is the scope of an IAM user?

A. It is tied to a specific AWS Region.
B. It is tied to a specific Availability Zone.
C. It is global and not scoped to any Region.
D. It is tied to a specific VPC.

Answer: C

Explanation: IAM is a global service. IAM users, groups, roles, and policies that you create are not specific to any AWS Region. This means a user can log in and access resources in any region, subject to their permissions.

---

Question #: 24
A user reports they cannot access a newly created EC2 instance, receiving an "explicit deny" error. The user has the `AdministratorAccess` policy attached. What is the most likely cause?

A. The user's credentials have expired.
B. There is a Service Control Policy (SCP) in AWS Organizations that is denying the action.
C. The EC2 service is down in that region.
D. The `AdministratorAccess` policy does not include permissions for EC2.

Answer: B

Explanation: `AdministratorAccess` grants full access, so a direct policy shouldn't be the issue. An explicit deny means there is a `Deny` statement somewhere in the evaluation path. If the account is part of an AWS Organization, a Service Control Policy (SCP) attached to the account or an Organizational Unit (OU) can restrict permissions for all users, including the root user and administrators. This is a common source of "explicit deny" errors when direct policies seem correct.

---

Question #: 25
You need to provide a new IAM user with a pre-built set of permissions for read-only access to nearly all AWS services. What is the quickest way to achieve this?

A. Create a new custom policy listing read-only actions for every service.
B. Attach the AWS managed policy named `ReadOnlyAccess`.
C. Attach the AWS managed policy named `PowerUserAccess`.
D. Create an IAM role with read-only permissions and have the user assume it.

Answer: B

Explanation: AWS provides pre-built managed policies for common use cases. The `ReadOnlyAccess` policy is specifically designed to grant read-only permissions across a wide range of AWS services. This is much faster and less error-prone than creating a custom policy from scratch (A). `PowerUserAccess` (C) grants create, modify, and delete permissions, which is not what is required. A role (D) is unnecessary for a user who will always be using these permissions directly.

---

Question #: 26
When is it appropriate to use an IAM inline policy instead of a customer-managed policy?

A. When you want to apply the same set of permissions to multiple IAM users.
B. When you want to maintain a strict one-to-one relationship between a policy and the single entity it's applied to.
C. When you want AWS to automatically update the policy when new services are released.
D. When the policy exceeds the character limit for managed policies.

Answer: B

Explanation: Inline policies are best used when you want to be certain that the permissions in a policy are not inadvertently attached to any other user, group, or role. Because they are embedded in a single entity, they create a strict one-to-one relationship. For reusable permissions, managed policies are the correct choice (A). AWS updates AWS-managed policies, not customer-managed or inline policies (C). Inline policies have smaller character limits than managed policies (D).

---

Question #: 27
An application running on-premises needs to access AWS resources. What is the most secure method for providing AWS credentials to the application?

A. Create an IAM role for cross-account access and use AWS STS to assume the role.
B. Create an IAM user, generate long-term access keys, and securely distribute them to the on-premises application.
C. Use AWS IAM Roles Anywhere to issue temporary credentials to the on-premises servers.
D. Use the AWS account root user's credentials, as it has the necessary permissions.

Answer: C

Explanation: IAM Roles Anywhere is a service specifically designed for this use case. It allows workloads running outside of AWS, such as on-premises servers, to use their existing X.509 digital certificates to obtain temporary AWS credentials and assume IAM roles. This is more secure than using long-term IAM user access keys (B). Option A is for AWS account-to-account access. Option D is never a secure practice.

---

Question #: 28
Which of the following is NOT a component of an IAM policy statement?

A. Version
B. Effect
C. Action
D. Principal
E. Metadata

Answer: E

Explanation: A standard IAM policy statement includes `Version`, `Effect` (Allow/Deny), `Action` (the API call), `Resource`, and optionally `Condition`. The `Principal` element is required in resource-based policies and role trust policies but not in identity-based policies. `Metadata` is not a valid component of an IAM policy statement.

---

Question #: 29
A solutions architect needs to understand which services and actions an IAM user has accessed in the last 90 days. Which IAM tool should be used?

A. IAM Policy Simulator
B. IAM Roles Anywhere
C. IAM Access Advisor (Access History)
D. AWS Organizations Service Control Policies

Answer: C

Explanation: The IAM Access Advisor shows the service permissions granted to a user, role, or group and when those services were last accessed. This information is crucial for identifying unused permissions and refining policies to adhere to the principle of least privilege. The Policy Simulator (A) is for testing policies, not reviewing past activity.

---

Question #: 30
What is the function of a trust policy for an IAM role?

A. It specifies the permissions that the role grants to the entity that assumes it.
B. It defines which principals (users, accounts, services) are allowed to assume the role.
C. It lists the IAM users who are trusted to manage the role.
D. It encrypts the temporary credentials generated by the role.

Answer: B

Explanation: An IAM role has two policies attached. The permissions policy (or policies) defines what the role can DO. The trust policy defines who can ASSUME the role. The trust policy is a critical security component that ensures only trusted entities can use the role.

---

Question #: 31
A company's security team mandates that all data stored in a specific S3 bucket must be encrypted. They also want to control who can use the encryption keys. Which IAM condition key can be used in a bucket policy to enforce a specific AWS KMS key for S3 uploads?

A. `s3:x-amz-server-side-encryption`
B. `s3:x-amz-acl`
C. `kms:EncryptionContext`
D. `s3:x-amz-server-side-encryption-aws-kms-key-id`

Answer: D

Explanation: To enforce server-side encryption with a specific KMS key, you can use a bucket policy that denies `s3:PutObject` requests if the condition is not met. The condition key `s3:x-amz-server-side-encryption-aws-kms-key-id` allows you to check if the request header specifies your required KMS key ARN. Option A checks for the encryption type (e.g., AES256 or aws:kms) but not the specific key.

---

Question #: 32
What happens if you try to delete an IAM user that is associated with an active access key?

A. The IAM user is deleted, but the access key remains active.
B. The deletion fails, and AWS prompts you to delete the access key first.
C. The IAM user is deleted, and the access key is automatically deactivated.
D. This action is not possible from the AWS Management Console, only the CLI.

Answer: C

Explanation: While the AWS console may prompt you and require you to acknowledge associated resources, the underlying API behavior is that you cannot delete an IAM user without first deleting their associated resources, including access keys, signing certificates, and password. The correct procedure is to first deactivate/delete keys, remove from groups, detach policies, and then delete the user. A direct deletion attempt will fail if these resources exist. Let's refine the answer: The most accurate description is that the deletion will fail.
*Correction:* The most accurate answer is that the deletion operation will fail with an error message stating that the user has active resources that must be removed first. Option B is the closest description of this behavior.

Answer: B

Explanation: AWS prevents the deletion of an IAM user if they have associated items like access keys, policies, or group memberships. To delete the user, you must first detach any policies, remove the user from all groups, and delete their access keys, signing certificates, and password. The API will return a `DeleteConflict` error if you attempt to delete a user with these items attached.

---

Question #: 33
An IAM policy contains the following statement. What does the wildcard `*` signify in the "Action" element?
`"Action": "ec2:Describe*"`

A. It grants permission to all actions in all AWS services.
B. It grants permission to all EC2 actions that begin with the prefix "Describe".
C. It grants permission only to the `ec2:DescribeInstances` action.
D. It signifies that the action applies to all resources in the account.

Answer: B

Explanation: The wildcard `*` can be used to match multiple characters. In an IAM policy's "Action" element, `ec2:Describe*` serves as a prefix match, granting permissions for all EC2 actions that start with "Describe", such as `ec2:DescribeInstances`, `ec2:DescribeVolumes`, and `ec2:DescribeSubnets`.

---

Question #: 34
A company wants to allow federated users from its corporate Active Directory to access the AWS Management Console. Which AWS service facilitates this?

A. AWS IAM Roles Anywhere
B. AWS Directory Service
C. AWS Identity and Access Management (IAM) using SAML 2.0 or OpenID Connect
D. Amazon Cognito

Answer: C

Explanation: IAM supports identity federation, allowing you to use an external identity provider (IdP), like Active Directory Federation Services (ADFS), that supports SAML 2.0. The IdP authenticates the user and passes an assertion to AWS STS, which then provides temporary credentials for the user to access AWS, often by assuming a role. While Cognito (D) can also be used for federation, direct IAM federation with SAML is the most direct answer for this specific use case.

---

Question #: 35
What is the best practice for securing the root user of an AWS account? (Choose TWO)

A. Use the root user for all automated scripts.
B. Enable Multi-Factor Authentication (MFA) on the root user.
C. Store the root user's access keys in a secure, encrypted S3 bucket.
D. Delete the root user's access keys if they are not needed.
E. Share the root user password with all administrators.

Answer: B, D

Explanation: The root user is the most privileged identity in the account. Best practices are to (B) enable MFA and (D) delete its access keys to prevent programmatic access. The root user password should be stored securely and used only for tasks that require root privileges. It should never be used for scripts (A), its keys should not be created or stored if not needed (C), and its password should never be shared (E).

---

Question #: 36
An IAM user is part of a group that allows `ec2:StartInstances`. A permissions boundary attached to the user allows `ec2:StopInstances`. What can the user do?

A. The user can start and stop instances.
B. The user can only start instances.
C. The user can only stop instances.
D. The user cannot start or stop instances.

Answer: D

Explanation: The effective permissions of an IAM entity are the intersection (the common permissions) of its identity-based policies and its permissions boundary. In this case, the identity policy allows `Start` and the boundary allows `Stop`. Since there is no overlap, the user has no permissions to perform either action.

---

Question #: 37
How can you test an IAM policy before applying it to users or roles in a production environment?

A. By using the IAM Access Advisor.
B. By using the IAM Policy Simulator.
C. By attaching it to a test user and observing the CloudTrail logs.
D. By using AWS Trusted Advisor.

Answer: B

Explanation: The IAM Policy Simulator is a tool specifically designed to help you test and troubleshoot IAM policies. You can select an entity (user, group, role), the policy to test, and the action to perform on a specific resource to see whether the policy would allow or deny the action in practice.

---

Question #: 38
What is a Service Control Policy (SCP)?

A. A policy used by an AWS service to access resources in a customer's account.
B. A type of identity-based policy that controls access to specific services.
C. A policy used in AWS Organizations to manage permissions and enforce guardrails across member accounts.
D. A policy that controls network traffic to and from AWS services.

Answer: C

Explanation: Service Control Policies (SCPs) are a feature of AWS Organizations. They offer central control over the maximum available permissions for all IAM entities in an account. SCPs act as a filter; even if an administrator grants `s3:*` in an account, if the SCP denies S3 access, no user or role in that account can use S3.

---

Question #: 39
An application running in a VPC needs to access Amazon S3 securely without traversing the public internet. Which IAM feature, in conjunction with VPC features, enables this?

A. An IAM role with a trust policy allowing the VPC.
B. A resource-based policy on the S3 bucket.
C. A VPC Endpoint for S3.
D. A NAT Gateway.

Answer: C

Explanation: While IAM controls the permissions, the network path is controlled by VPC features. A VPC Endpoint for S3 allows resources within your VPC to communicate with S3 using private IP addresses. You can then use bucket policies (a type of resource-based policy) to restrict access, allowing requests only from that specific VPC endpoint, but the endpoint itself is the key network component. A NAT Gateway (D) provides outbound internet access, which is the opposite of what is needed.

---

Question #: 40
Which of the following credentials can be used for programmatic access to AWS? (Choose TWO)

A. Password
B. Access Key ID and Secret Access Key
C. MFA Code
D. X.509 Certificate
E. Key Pair (.pem file)

Answer: B, D

Explanation: Programmatic access (using the CLI, SDKs, or API) is primarily authenticated using an Access Key ID and Secret Access Key (B). For some older services like the SOAP API for S3, an X.509 certificate (D) can also be used. A password (A) is for console access. An MFA code (C) is a second factor, not a primary credential. A Key Pair (E) is used for SSH access to EC2 instances, not for authenticating to AWS APIs.

---

Question #: 41
A company has a policy that passwords for IAM users must be rotated every 90 days. A new user is created, but the console is not forcing a password reset on their first login. What could be the issue?

A. The "Require password reset" option was not enabled in the account's password policy.
B. The user was created using the AWS CLI instead of the Management Console.
C. The user was not assigned an MFA device upon creation.
D. The password policy has an option like "Allow users to change their own password" unchecked.

Answer: A

Explanation: In the IAM account password policy settings, there is a specific checkbox for "Require administrators to set a temporary password that the user must change on first sign-in." If this is not enabled, users created with a console-generated or admin-set password will not be forced to change it. While (D) is a required permission, the enforcement of a first-login reset is a separate setting in the password policy itself.

---

Question #: 42
You are writing an IAM policy to grant access to a specific folder within an S3 bucket named `my-company-docs`. The folder is named `public-reports`. Which ARN format is correct for the `Resource` element?

A. `arn:aws:s3:::my-company-docs`
B. `arn:aws:s3:::my-company-docs/*`
C. `arn:aws:s3:::my-company-docs/public-reports/*`
D. `arn:aws:s3:::my-company-docs/public-reports`

Answer: C

Explanation: To grant permissions to the objects *within* a folder, you must specify the bucket name, the folder path, and add a `/*` at the end. This `/*` wildcard indicates that the policy applies to all objects inside the `public-reports` folder. Option D would refer to an object literally named "public-reports", not the contents of a folder. Option B would apply to all objects in the bucket, not just that folder.

---

Question #: 43
When you create an IAM role, what must you define?

A. The permissions policy and the users who can assume the role.
B. The trust policy and the permissions policy.
C. The trust policy and the groups the role belongs to.
D. The permissions policy and the MFA requirements for the role.

Answer: B

Explanation: Creating an IAM role requires two distinct policies. The trust policy specifies which principals (accounts, users, services, etc.) are allowed to assume the role. The permissions policy (or policies) specifies what actions the entity assuming the role is allowed to perform.

---

Question #: 44
A policy is needed to allow an EC2 instance to read messages from an SQS queue. Which combination of principal and resource is correct in the respective IAM policies?

A. Principal: The EC2 instance ARN in the SQS queue policy. Resource: The SQS queue ARN in the EC2 role's permission policy.
B. Principal: The EC2 service in the SQS queue policy. Resource: The EC2 instance ARN in the role's permission policy.
C. Principal: The IAM user who launched the instance. Resource: The SQS queue ARN.
D. Principal: Not needed in the EC2 role. Resource: Not needed in the SQS queue policy.

Answer: A

Explanation: Access can be granted in two ways: identity-based or resource-based. For the identity-based approach, the EC2 instance's role needs a permission policy where the `Resource` is the SQS queue's ARN. For the resource-based approach, the SQS queue's access policy needs a statement where the `Principal` is the ARN of the IAM role attached to the EC2 instance. Option A correctly describes both sides of this relationship.

---

Question #: 45
What is the most significant security risk of not rotating IAM access keys regularly?

A. The keys might become incompatible with new AWS services.
B. The performance of API calls using the keys may degrade over time.
C. If a key is compromised, it provides a longer window of opportunity for an attacker to use it.
D. AWS automatically deletes keys that are older than two years.

Answer: C

Explanation: The primary reason for rotating keys is to limit the potential damage if they are ever compromised (e.g., accidentally checked into a public code repository). By rotating them, you ensure that any leaked key will only be valid for a limited time. AWS does not delete old keys (D). Performance (B) and compatibility (A) are not related to key age.

---

Question #: 46
A company uses AWS Organizations and has a Service Control Policy (SCP) that denies access to the `iam:CreateUser` action. An administrator in a member account, who has the `AdministratorAccess` policy, attempts to create a new IAM user. What will happen?

A. The user will be created successfully because `AdministratorAccess` includes this permission.
B. The action will fail because the SCP takes precedence and creates an explicit deny.
C. The administrator will be prompted to override the SCP.
D. The action will succeed, but a security alert will be sent to the master account.

Answer: B

Explanation: SCPs act as guardrails for accounts within an organization. They do not grant permissions but rather set the maximum permissions available. An explicit deny in an SCP will override any allow in an IAM policy within a member account. The administrator's action will be denied.

---

Question #: 47
Which AWS service allows you to create and manage a directory in the cloud and connect AWS resources to your on-premises Active Directory?

A. Amazon Cognito
B. AWS IAM
C. AWS Directory Service
D. AWS Organizations

Answer: C

Explanation: AWS Directory Service provides multiple ways to use Microsoft Active Directory with other AWS services. This includes creating a managed AD in the cloud or using AD Connector to proxy directory requests to your on-premises AD without caching information in the cloud.

---

Question #: 48
An IAM policy grants `Allow` for `ec2:StartInstances` and `ec2:StopInstances` for the resource `"*"`. What is the impact of the `Resource: "*"` element?

A. The user can start and stop EC2 instances in any AWS region.
B. The user can start and stop any resource in the AWS account, not just EC2 instances.
C. The user can start and stop any EC2 instance within the AWS account.
D. The policy is invalid because `"*"` is not a valid resource for EC2 actions.

Answer: C

Explanation: The `Resource: "*"` in an IAM policy means the action applies to all resources *that the action supports*. Since the actions are `ec2:StartInstances` and `ec2:StopInstances`, this policy allows the user to perform these actions on any and all EC2 instances in the account. While IAM is global, the policy applies to instances in any region the user operates in, but the most precise answer is that it applies to any EC2 instance resource (C).

---

Question #: 49
What is a primary use case for Amazon Cognito?

A. Managing permissions for AWS services and resources.
B. Providing identity management for web and mobile applications, including sign-up, sign-in, and access control.
C. Federating access for corporate users into the AWS Management Console.
D. Auditing IAM user activity across an AWS organization.

Answer: B

Explanation: Amazon Cognito is primarily a service for developers to add user sign-up, sign-in, and access control to their web and mobile applications. It provides user pools for authentication and identity pools for authorization (granting temporary AWS credentials). IAM (A, C) manages permissions within AWS itself. CloudTrail (D) audits user activity.

---

Question #: 50
Which CLI command would you use to see if a specific IAM policy would allow or deny a given action, without actually performing the action?

A. `aws iam check-policy`
B. `aws iam simulate-principal-policy`
C. `aws iam get-policy-permission`
D. `aws iam validate-policy`

Answer: B

Explanation: The `aws iam simulate-principal-policy` command is the CLI equivalent of the IAM Policy Simulator. It allows you to test a policy against a list of actions and resources to determine the resulting "allow" or "deny" decision.

---

Question #: 51
A company wants to give a user the ability to pass a role to an EC2 instance at launch. What specific IAM permission is required for this?

A. `ec2:RunInstances`
B. `iam:CreateRole`
C. `iam:PassRole`
D. `ec2:AssociateIamInstanceProfile`

Answer: C

Explanation: The `iam:PassRole` permission is a security control that allows a user to pass an existing IAM role to an AWS service like EC2. This is a separate and required permission in addition to `ec2:RunInstances`, to prevent users from assigning roles with more permissions than they themselves have, which would be a privilege escalation.

---

Question #: 52
What is the main difference between an IAM user and an IAM role?

A. A user has permanent credentials, while a role has temporary credentials.
B. A role can belong to a group, but a user cannot.
C. A user is global, while a role is regional.
D. A role must be associated with an MFA device, but a user does not.

Answer: A

Explanation: The defining difference is that an IAM user has long-term credentials (password, access keys) associated with it. An IAM role has no credentials of its own; it is an entity that is assumed, and upon assumption, it provides short-term, temporary credentials that expire. Both users and roles are global (C). Users can belong to groups, roles cannot (B). MFA can be required for both (D).

---

Question #: 53
A resource-based policy is attached to an S3 bucket. It grants access to an IAM user in another AWS account. The IAM user does not have any identity-based policies allowing S3 access. Can the user access the bucket?

A. No, access is denied because the user has no identity-based policy allowing it.
B. Yes, if a resource-based policy in another account grants access, no identity-based policy is needed in the user's home account.
C. No, cross-account access is only possible using IAM roles.
D. Yes, but only if the user first assumes a role in the target account.

Answer: B

Explanation: For cross-account access, permissions must be granted by BOTH the identity policy in the source account AND the resource policy in the destination account. However, there is an exception: if the resource-based policy in the destination account explicitly grants access to a principal (user or role) in another account, that principal does NOT need an identity-based policy in its own account to allow the action. The resource policy is sufficient.

*Correction:* The standard rule for cross-account access (excluding roles) is that permissions must exist on both sides. Let's re-verify this nuance. From AWS Docs: "For cross-account access, you must use an IAM role. A resource-based policy can grant a user in another account access to the resource. In that case, the user's administrator must also grant the user permission to access the resource." This means both are required. Therefore, the original answer is incorrect.

Answer: A

Explanation: For cross-account access between principals that are not using a role, permissions must be granted on both sides. The resource-based policy in the target account must grant access to the user, AND the user's identity-based policies in their home account must also grant them permission to perform the action on the target resource. Since the user has no such identity-based policy, access will be denied.

---

Question #: 54
You are creating a custom IAM policy. You want to deny all actions except for a few specific ones related to S3 and EC2. What is the best way to structure this policy statement?

A. Use `"Effect": "Allow"` and list all S3 and EC2 actions.
B. Use `"Effect": "Deny"`, `"Action": "*:*"` and then use a `Condition` to exclude the S3 and EC2 actions.
C. Use `"Effect": "Deny"` and use the `"NotAction"` element to specify the S3 and EC2 actions that should be allowed.
D. Create two policies: one to deny all actions and one to allow the S3 and EC2 actions.

Answer: C

Explanation: The `NotAction` element, when combined with `"Effect": "Deny"`, creates a statement that denies everything *except* for the actions listed in `NotAction`. This is a powerful way to create a security boundary, ensuring that the user can ONLY perform the specified actions and nothing else. This is more explicit and secure than a broad "Allow" statement.

---

Question #: 55
An IAM policy contains a variable like `${aws:username}`. What is the purpose of this variable?

A. It is a placeholder that gets replaced by the IAM username of the user making the request.
B. It is a tag that can be used for cost allocation.
C. It is a condition key that restricts access based on the user's name.
D. It is a variable that can only be used in role trust policies.

Answer: A

Explanation: IAM policy variables allow you to create general policies that are customized at the time of evaluation. The `${aws:username}` variable is replaced with the friendly name of the current IAM user. This is useful for creating self-service policies, for example, allowing users to manage resources only in an S3 "home" folder that matches their username (`s3:::my-bucket/home/${aws:username}/*`).

---

Question #: 56
Which AWS service provides a formal way to request, track, and manage access to AWS accounts by providing time-bound, least-privilege permissions for your workforce?

A. AWS IAM
B. AWS Directory Service
C. AWS IAM Identity Center (Successor to AWS SSO)
D. AWS Organizations

Answer: C

Explanation: AWS IAM Identity Center is the recommended service for managing workforce access to AWS accounts and applications. It allows you to connect to an identity provider (like Azure AD, Okta, or its own internal directory) and then centrally manage "permission sets" that can be assigned to users or groups for specific accounts, with time-bound sessions. This simplifies access management at scale compared to managing IAM users in every account.

---

Question #: 57
Which of the following is a valid IAM security best practice?

A. Create a single, powerful IAM user and share its credentials among the operations team.
B. Attach policies directly to IAM users instead of using groups.
C. Grant the least privilege necessary for a user to perform their required tasks.
D. Always keep the root user's access keys active for emergency situations.

Answer: C

Explanation: The principle of least privilege is a fundamental security concept in IAM and cybersecurity in general. It means granting only the permissions that are absolutely required for a user, application, or service to perform its function, and no more. This minimizes the potential damage from errors or compromise. Sharing credentials (A), attaching policies to users instead of groups (B), and keeping root keys active (D) are all anti-patterns.

---

Question #: 58
An S3 bucket policy explicitly allows access to an IAM role `arn:aws:iam::111122223333:role/MyRole`. An SCP applied to the account `111122223333` explicitly denies all S3 access. What is the result when `MyRole` tries to access the bucket?

A. Access is allowed because a resource-based policy takes precedence over an SCP.
B. Access is denied because the SCP acts as a guardrail that overrides account-level permissions.
C. Access is allowed, but an audit finding will be logged in AWS Security Hub.
D. The role will be unable to be assumed because of the SCP conflict.

Answer: B

Explanation: The AWS Organizations SCP evaluation logic is applied before any account-level IAM policies. An explicit deny in an SCP will prevent the action, regardless of what IAM permissions (identity-based or resource-based) are configured within the account. The role can still be assumed, but it will be unable to perform the denied S3 actions.

---

Question #: 59
A developer wants to give a Lambda function permission to write objects to an S3 bucket. What is the first step the developer should take?

A. Hardcode an IAM user's access key into the Lambda function's code.
B. Create an IAM role for the Lambda function with an appropriate permissions policy.
C. Configure the S3 bucket to allow anonymous public write access.
D. Create an IAM user for the Lambda function.

Answer: B

Explanation: AWS services like Lambda are designed to use IAM roles (specifically, service roles) for permissions. The best practice is to create a role with a policy granting `s3:PutObject` permission and assign it as the function's execution role. This provides temporary, automatically managed credentials to the function. Hardcoding keys (A) is insecure. Public access (C) is insecure and incorrect. IAM users (D) are for people or long-term application credentials, not for services like Lambda.

---

Question #: 60
How can you get a report of all IAM users in your account along with the status of their credentials (password, access keys, MFA)?

A. By generating a credential report from the IAM console.
B. By parsing the output of the `aws iam list-users` CLI command.
C. By reviewing CloudTrail logs for login events.
D. By creating a custom script to query the IAM API for each user individually.

Answer: A

Explanation: The IAM credential report is a downloadable CSV file that lists all users in your account and details the status of their various credentials, including password last used, access key last used, MFA status, and more. It is the most direct and comprehensive way to get this information for auditing purposes.

---

Question #: 61
You need to grant an IAM user permissions to manage only their own access keys and password. Which AWS managed policy should you use?

A. `IAMFullAccess`
B. `PowerUserAccess`
C. `IAMUserChangePassword`
D. `IAMSelfManageServiceSpecificCredentials`

Answer: C

Explanation: The `IAMUserChangePassword` policy grants only the permissions necessary for a user to change their own console password. To manage their own access keys, they would need additional permissions like `iam:CreateAccessKey`, `iam:DeleteAccessKey`, and `iam:UpdateAccessKey`. Of the options provided, (C) is the closest, though it only covers passwords. A custom policy is usually best for this. Let's re-examine the options. There is no single managed policy for this. `IAMUserChangePassword` is only for the password. The correct way is a custom policy. If we assume the question implies there is a managed policy for this, we need to find the best fit. Let's assume the question is flawed and focus on the most restrictive, relevant policy.

*Correction*: A more specific policy exists. `IAMUserChangePassword` is just for the password. A better approach involves other permissions. A more precise managed policy might be available or a custom policy is needed. Let's review managed policies again. There is no single AWS managed policy that combines just self-password-change and self-key-management. Therefore, a custom policy is required. Let's rephrase the answer to reflect this.

Answer: C (with clarification)

Explanation: Of the choices given, `IAMUserChangePassword` is the managed policy that allows a user to change their own password. However, it does NOT grant permissions to manage their own access keys. The ideal solution would be to create a custom policy containing `iam:ChangePassword`, `iam:CreateAccessKey`, `iam:DeleteAccessKey`, etc., with a condition that the resource (`"Resource": "arn:aws:iam::*:user/${aws:username}"`) matches the current user.

---

Question #: 62
What information is contained within an IAM role's trust policy?

A. The ARN of the resources the role is allowed to access.
B. The list of API actions the role is allowed to perform.
C. The principal that is allowed to assume the role.
D. The date and time when the role's temporary credentials will expire.

Answer: C

Explanation: The trust policy's sole purpose is to define *who* (which principal - account, user, service, etc.) can assume the role. The permissions - what the role can do - are defined in the separate permissions policy(ies) attached to the role.

---

Question #: 63
An organization has hundreds of AWS accounts managed with AWS Organizations. They need to ensure that no user in any member account can ever disable AWS CloudTrail. How can this be enforced centrally?

A. By applying an IAM policy to an administrative role in each account.
B. By creating an AWS Config rule to detect when CloudTrail is disabled.
C. By applying a Service Control Policy (SCP) at the organization's root that denies the `cloudtrail:StopLogging` action.
D. By using AWS Trusted Advisor to monitor CloudTrail status.

Answer: C

Explanation: A Service Control Policy (SCP) is the only way to create a preventative guardrail that applies to all users and roles (including root) in an account. By attaching an SCP with an explicit deny for actions like `cloudtrail:StopLogging` and `cloudtrail:DeleteTrail` to the organization root or an OU, you can centrally enforce that these actions can never be taken in the member accounts.

---

Question #: 64
Which of the following are valid principals in an IAM policy? (Choose TWO)

A. An AWS Service (e.g., `ec2.amazonaws.com`)
B. An AWS Region (e.g., `us-east-1`)
C. An AWS Account ID or ARN
D. A specific IP Address
E. An IAM Group

Answer: A, C

Explanation: The `Principal` element specifies the user, account, service, or other entity that is allowed or denied access. Valid principals include an AWS account ARN (or just the ID), an IAM user ARN, an IAM role ARN, and an AWS service principal like `ec2.amazonaws.com` or `lambda.amazonaws.com`. IAM Groups (E) are not principals; you cannot grant permissions to a group in a resource-based policy. IP addresses (D) are used in Condition elements, not as principals. Regions (B) are not principals.

---

Question #: 65
A solutions architect is designing a system where an application on EC2 needs to access a DynamoDB table. To adhere to the principle of least privilege, how should the IAM policy be configured?

A. Allow all DynamoDB actions (`dynamodb:*`) on all tables (`"*"`).
B. Allow only the required actions (e.g., `dynamodb:PutItem`, `dynamodb:GetItem`) on the specific table's ARN.
C. Create an IAM user with the `AmazonDynamoDBFullAccess` managed policy and store the keys on the EC2 instance.
D. Allow all actions (`"*:*"`) on all resources (`"*"`).

Answer: B

Explanation: The principle of least privilege requires granting only the necessary permissions on only the necessary resources. Option B is the only one that follows this principle by specifying the exact actions needed (`PutItem`, `GetItem`) and scoping the resource down to the specific DynamoDB table's ARN. All other options are overly permissive.

---

Question #: 66
What is the function of the AWS Security Token Service (STS)?

A. To store and rotate secrets used by applications.
B. To create and provide trusted users with temporary security credentials.
C. To scan IAM policies for security vulnerabilities.
D. To centrally manage single sign-on access to multiple AWS accounts.

Answer: B

Explanation: AWS STS is a web service that enables you to request temporary, limited-privilege credentials for IAM users or for users that you authenticate (federated users). Key API calls include `AssumeRole`, `GetFederationToken`, and `GetSessionToken`, all of which provide temporary credentials.

---

Question #: 67
You are trying to attach a 7,000-character managed IAM policy to a user but receive an error. What is the most likely cause?

A. IAM policies must be written in YAML, not JSON.
B. The maximum size for a customer-managed policy is 6,144 characters.
C. The user already has the maximum number of 10 policies attached.
D. The policy contains an invalid action that does not exist.

Answer: B

Explanation: AWS has size limits for IAM entities. The maximum character size for a customer-managed policy is 6,144 characters. For inline policies, the limit is smaller. Since 7,000 exceeds this limit, the request would fail. The limit on the number of policies attached to a user is indeed 10 (C), but the size is the more direct cause given the information.

---

Question #: 68
A new IAM user is created with no policies attached and is not part of any groups. What can this user do?

A. The user has read-only access to all AWS services by default.
B. The user has administrative access by default.
C. The user can do nothing; all actions are implicitly denied by default.
D. The user can only change their own password.

Answer: C

Explanation: By default, a new IAM user has no permissions. All AWS actions are implicitly denied until they are explicitly allowed by an attached identity-based policy (or a resource-based policy).

---

Question #: 69
What is the purpose of an instance profile when launching an EC2 instance?

A. To define the CPU and memory characteristics of the instance.
B. To act as a container for an IAM role that the instance can use.
C. To specify the SSH key pair for logging into the instance.
D. To attach a pre-configured security group to the instance.

Answer: B

Explanation: An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance starts. The instance can then retrieve temporary credentials from the metadata service to interact with other AWS services as defined by the role's permissions.

---

Question #: 70
Your company has a "break-glass" administrative user for emergencies. To ensure it is only used when necessary, you want to be notified every time this user logs in. What is the best way to achieve this?

A. Use the IAM credential report to check for logins daily.
B. Create a CloudWatch Alarm that triggers on a specific CloudTrail event and sends an SNS notification.
C. Configure the IAM user's policy to send an email upon login.
D. Use AWS Trusted Advisor to monitor high-privilege user activity.

Answer: B

Explanation: This is a classic event-driven security monitoring pattern. AWS CloudTrail captures console logins as an event (e.g., `ConsoleLogin`). You can create a CloudWatch Events/EventBridge rule that matches this specific event for that specific user's ARN. The rule's target can be an SNS topic, which then sends an email or SMS notification to your security team.

---

Question #: 71
What is the difference between AWS IAM Identity Center (SSO) and IAM Federation with SAML?

A. IAM Federation can only be used with Microsoft Active Directory.
B. IAM Identity Center provides a user portal and centralizes management of permissions across many accounts.
C. IAM Identity Center uses permanent access keys, while Federation uses temporary ones.
D. There is no difference; they are two names for the same service.

Answer: B

Explanation: While both use federation, IAM Identity Center is a higher-level, managed service. It simplifies the process by providing a user portal (where users can see and select the accounts/roles they have access to) and a centralized place to manage "permission sets" and their assignment to users/groups across your entire AWS Organization. Standard IAM Federation requires more manual configuration of roles and trust policies in each account.

---

Question #: 72
An IAM policy allows an action. A permissions boundary on the same user also allows the action. A resource-based policy on the target S3 bucket denies the action. What is the result?

A. Allowed, because the identity policy and boundary both allow it.
B. Denied, because a resource-based policy's explicit deny is evaluated.
C. Allowed, because identity policies override resource policies.
D. The outcome depends on which policy was created last.

Answer: B

Explanation: The final decision to allow or deny is based on the evaluation of all applicable policies, including identity, resource, and organization policies. An explicit deny from any of these policy types will always override any allows. In this case, the explicit deny in the S3 bucket policy will cause the request to be denied.

---

Question #: 73
Which IAM entity is best suited for assigning a set of permissions to a collection of IAM users?

A. An IAM Role
B. An IAM Policy
C. An IAM Group
D. An IAM Principal

Answer: C

Explanation: An IAM Group is a container for IAM users. Its purpose is to simplify permission management. You can attach a policy to the group, and all users within that group will inherit those permissions. This is more efficient than attaching the same policy to many individual users.

---

Question #: 74
A company wants to prevent any IAM user or role in an account from launching EC2 instances larger than `t2.large`. How can this be enforced?

A. Create an IAM policy with a `Deny` effect and a `Condition` on the `ec2:InstanceType` key.
B. Use AWS Budgets to send an alert when a large instance is launched.
C. Configure the VPC to only allow `t2.large` instances.
D. This can only be controlled using Service Control Policies (SCPs).

Answer: A

Explanation: This can be enforced with an identity-based policy. You can create a policy that denies the `ec2:RunInstances` action if the `ec2:InstanceType` condition key does not match `t2.micro`, `t2.small`, `t2.medium`, or `t2.large`. This policy can then be attached to all non-admin users/groups or, more powerfully, used in a permissions boundary. An SCP could also do this at an organizational level (D), but it can be done with a standard IAM policy as well (A).

---

Question #: 75
What is the AWS recommended best practice for the initial setup of a new AWS account?

A. Immediately create access keys for the root user for programmatic access.
B. Create a powerful IAM role and delete the root user.
C. Create an individual IAM user with administrator privileges, enable MFA on the root user, and stop using the root user.
D. Share the root user credentials with the trusted members of your IT team.

Answer: C

Explanation: The standard AWS best practice is to secure the root user with MFA and then create a separate IAM user for day-to-day administrative tasks. The root user should only be used for a very small number of tasks that specifically require it (like changing account settings or closing the account).

---

Question #: 76
A user's permissions are derived from a user policy, a group policy, and a resource policy. Which policies are evaluated to determine the final permission?

A. Only the user policy is used.
B. Only the user policy and the group policy are used.
C. Only the most restrictive policy is used.
D. All applicable policies are evaluated together.

Answer: D

Explanation: AWS IAM evaluates all applicable policies, including identity-based policies (attached to the user and any groups they are in) and any resource-based policies (attached to the resource being requested). The logic combines these, with an explicit deny in any policy overriding all allows.

---

Question #: 77
What is the purpose of the `Version` element in an IAM policy document, e.g., `"Version": "2012-10-17"`?

A. It tracks the version of the specific policy, incrementing with each change.
B. It specifies the IAM policy language version, which defines the features and syntax that can be used.
C. It indicates the AWS SDK version required to interpret the policy.
D. It is an optional comment field for the administrator.

Answer: B

Explanation: The `Version` element specifies the version of the policy language. It is not a version number for your specific policy document. The latest version is `"2012-10-17"`, which introduced features like policy variables. Older policies might use `"2008-10-17"`. It is a required element.

---

Question #: 78
Which of the following is an example of an AWS managed policy?

A. A policy you create to grant specific DynamoDB access to your developers.
B. `AdministratorAccess`
C. A policy that is embedded directly into an IAM user.
D. A policy that trusts another AWS account.

Answer: B

Explanation: An AWS managed policy is a standalone policy that is created and managed by AWS. Examples include `AdministratorAccess`, `PowerUserAccess`, and `ReadOnlyAccess`. A policy you create (A) is a customer-managed policy. An embedded policy (C) is an inline policy. A trust policy (D) is a specific type of policy attached to a role.

---

Question #: 79
You need to ensure that when a user assumes a specific role, they are also required to use MFA. Where do you configure this requirement?

A. In the user's identity-based policy.
B. In the role's permissions policy.
C. In the account's password policy.
D. In the role's trust policy (assume role policy).

Answer: D

Explanation: To enforce MFA for role assumption, you add a `Condition` block to the role's trust policy. The condition checks if `"aws:MultiFactorAuthPresent": "true"`. This ensures that the `sts:AssumeRole` call will only succeed if the originating user's session was authenticated with MFA.

---

Question #: 80
An EC2 instance needs to be able to describe other EC2 instances and also stop a specific, tagged instance. Which two actions should be included in its IAM role's policy? (Choose TWO)

A. `ec2:DescribeInstances`
B. `ec2:TerminateInstances`
C. `ec2:StopInstances`
D. `ec2:ModifyInstanceAttribute`
E. `iam:PassRole`

Answer: A, C

Explanation: The permissions map directly to the API calls. `ec2:DescribeInstances` is required to list and view details of instances. `ec2:StopInstances` is required to stop an instance. You would then use a `Condition` element in the policy statement for `ec2:StopInstances` to limit this permission to instances with a specific tag.

---

Question #: 81
A company uses a resource-based policy on an SQS queue to grant `sqs:SendMessage` permission to an IAM role. What happens if the IAM role's permissions policy does not also grant this permission?

A. The message will be sent successfully because the resource-based policy is sufficient.
B. The action will fail because intra-account access requires permissions on both the identity and the resource.
C. The message will be sent, but it will be placed in the dead-letter queue.
D. The action will fail with an "Invalid Principal" error.

Answer: A

Explanation: For actions within the same AWS account, if either the identity-based policy OR the resource-based policy allows the action (and there is no explicit deny), the action is allowed. The permissions are not strictly required on both sides as they are for cross-account access. Since the queue's policy allows it, the role can send the message.

---

Question #: 82
Which IAM feature allows you to define a set of permissions and then use it as a template for creating new IAM roles and users with a predefined set of capabilities?

A. IAM Groups
B. AWS Managed Policies
C. IAM Permissions Boundaries
D. AWS IAM Identity Center Permission Sets

Answer: D

Explanation: In IAM Identity Center (formerly AWS SSO), a Permission Set is a template for permissions. You define a set of permissions (using inline policies or by attaching AWS managed policies), and then you can grant users and groups access to AWS accounts using that permission set. This is a key feature for managing access at scale.

---

Question #: 83
An application must be able to create its own IAM access keys. What permission must be granted to its IAM user/role?

A. `iam:CreateLoginProfile`
B. `iam:GenerateCredentialReport`
C. `iam:CreateAccessKey`
D. `sts:GetSessionToken`

Answer: C

Explanation: The `iam:CreateAccessKey` permission directly allows a principal to create a new access key ID and secret access key for a specified IAM user. This is a highly privileged permission and should be granted with extreme caution.

---

Question #: 84
A policy grants a user permission to terminate EC2 instances, but only if the instance has a tag `Department` with the value `Test`. Which policy element is used to check for the tag?

A. `Principal`
B. `Action`
C. `Condition`
D. `Resource`

Answer: C

Explanation: The `Condition` element is used to enforce criteria for when a policy is valid. To check for tags, you use condition keys like `aws:ResourceTag/tag-key`. In this case, the condition would be `StringEquals: {"aws:ResourceTag/Department": "Test"}`.

---

Question #: 85
Which of the following credentials has the longest lifetime by default?

A. Credentials from an EC2 instance profile role.
B. Credentials from assuming a role via the `sts:AssumeRole` API call.
C. An IAM user's access key.
D. Credentials from an IAM Identity Center (SSO) session.

Answer: C

Explanation: An IAM user's access key is a long-term credential; it is valid forever until it is manually rotated or deactivated. Credentials from STS (A, B) and Identity Center (D) are temporary by design and expire, typically after one hour by default, though this can be extended up to 12 hours for roles.

---

Question #: 86
You need to provide access to an S3 bucket for a large number of users authenticated through your company's mobile app. You do not want to create an IAM user for each app user. Which service is designed for this scenario?

A. AWS IAM
B. Amazon Cognito
C. AWS Directory Service
D. IAM Roles Anywhere

Answer: B

Explanation: Amazon Cognito is the ideal service for this use case. It allows you to create a user pool to manage your app's users. You can then use a Cognito Identity Pool to exchange a token from the user pool for temporary, limited-privilege AWS credentials, allowing the authenticated app user to access resources like an S3 bucket.

---

Question #: 87
What is the effect of attaching the `AWSDenyAll` policy (a custom policy that denies `*:*` on resource `*`) to an IAM user?

A. It has no effect if the user has other `Allow` policies.
B. It prevents the user from performing any action in AWS.
C. It puts the user's account into a suspended state.
D. It only denies actions performed via the AWS CLI, not the console.

Answer: B

Explanation: An explicit deny (`"Effect": "Deny"`) on all actions (`"Action": "*:*"`) for all resources (`"Resource": "*"`) will override any and all `Allow` statements in any other policy attached to the user or their groups. This effectively blocks the user from doing anything.

---

Question #: 88
A junior developer needs access to view CloudWatch metrics and logs for a specific application but should not be able to modify anything. What is the most secure way to grant this access?

A. Add the developer to the administrators' group.
B. Grant the developer the `CloudWatchReadOnlyAccess` AWS managed policy.
C. Give the developer the credentials for a role that has full CloudWatch access.
D. Create a custom policy granting only `cloudwatch:Get*`, `cloudwatch:List*`, `logs:Describe*`, and `logs:GetLogEvents` actions and attach it to the developer's group.

Answer: D

Explanation: While `CloudWatchReadOnlyAccess` (B) is a good start, the principle of least privilege dictates that access should be scoped down to only the required resources if possible. The most secure and precise option is to create a custom policy that not only specifies read-only actions but could also limit them to specific log groups or metric namespaces related to the application. Option D is the best representation of this principle.

---

Question #: 89
You have configured cross-account access using an IAM role. A user in Account A is trying to assume a role in Account B but is getting a "not authorized" error. The role's trust policy in Account B correctly lists Account A as a trusted principal. What is a likely problem in Account A?

A. The user in Account A does not have the `sts:AssumeRole` permission in their IAM policy.
B. The user in Account A needs to have MFA enabled.
C. Account A and Account B are in different AWS regions.
D. The role in Account B needs a permissions policy.

Answer: A

Explanation: To assume a role, even a correctly configured one, the user or role initiating the request must have the `sts:AssumeRole` permission in its own identity-based policy. This permission must specify the ARN of the role they are trying to assume as a resource. Without this permission, the STS service will deny their request to assume the role.

---

Question #: 90
What is the purpose of an IAM group?

A. To apply a set of permissions to multiple resources at once.
B. A collection of IAM users used to simplify permission management.
C. To create a logical separation of AWS accounts.
D. To define a trusted service principal.

Answer: B

Explanation: An IAM group is simply a collection of IAM users. It is not an identity and cannot be used as a principal. Its sole purpose is to make it easier to manage permissions. You attach policies to the group, and all users in the group inherit those permissions.

---

Question #: 91
An S3 bucket contains sensitive data. You need to ensure that data can only be accessed from within your corporate network and from a specific EC2 role. Which type of policy is best suited for this requirement?

A. An identity-based policy attached to every user.
B. A Service Control Policy.
C. A resource-based policy (a bucket policy).
D. An IAM permissions boundary.

Answer: C

Explanation: A resource-based policy (an S3 bucket policy) is the ideal place to define complex access controls for a resource. You can write a single policy that has statements to allow access to your EC2 role's ARN and also allows access based on a condition key for the source IP address (`aws:SourceIp`), all within the single policy attached directly to the bucket.

---

Question #: 92
You see `iam:PassRole` in a CloudTrail log. What does this event signify?

A. A user has successfully assumed a new role.
B. A user has passed an IAM role to an AWS service, such as when launching an EC2 instance.
C. A user has created a new IAM role.
D. A user has modified the permissions of an IAM role.

Answer: B

Explanation: The `PassRole` action is specifically for the act of granting an AWS service permission to use a role. It is a distinct permission to prevent privilege escalation. Seeing this in CloudTrail means a user authorized an AWS service (like EC2 or Lambda) to use a specific role.

---

Question #: 93
What is the key difference between authentication and authorization in the context of IAM?

A. Authentication is verifying who you are; authorization is determining what you're allowed to do.
B. Authentication is done by IAM; authorization is done by Amazon S3.
C. Authentication uses access keys; authorization uses passwords.
D. Authentication applies to users; authorization applies to groups.

Answer: A

Explanation: This is a fundamental concept. Authentication is the process of verifying identity (e.g., checking a password or access key). Authorization is the process of checking the authenticated identity's permissions (evaluating IAM policies) to see if they are allowed to perform the requested action.

---

Question #: 94
Which IAM policy allows a user to perform any action on any resource?

A. The `PowerUserAccess` AWS managed policy.
B. A custom policy with `"Effect": "Allow", "Action": "*", "Resource": "*"`
C. The `ReadOnlyAccess` AWS managed policy.
D. A custom policy with `"Effect": "Allow", "Action": "*:*", "Resource": "*"`

Answer: D

Explanation: `PowerUserAccess` (A) grants almost full access but explicitly denies management of IAM users and groups. To grant true administrative access, the policy must allow all actions on all resources. The correct syntax for all actions is `"*:*"` or simply `"*"`. Option D is the most accurate representation of an administrative policy.

---

Question #: 95
A company wants to allow users to sign in to the AWS Management Console using their existing Google Workspace (G Suite) credentials. What must be configured?

A. An IAM role for each user in Google Workspace.
B. A trust relationship between AWS IAM and Google as a SAML 2.0 Identity Provider.
C. An IAM user for each person with a password matching their Google password.
D. An AWS Directory Service connector for Google Workspace.

Answer: B

Explanation: This is a standard identity federation scenario. You would configure Google Workspace as a SAML 2.0 Identity Provider (IdP) and configure IAM as a Service Provider (SP). This establishes a trust that allows users authenticated by Google to receive temporary credentials to access AWS by assuming a predefined IAM role.

---

Question #: 96
An IAM policy evaluation results in no `Deny` and no `Allow` for a specific action. What is the outcome?

A. The action is allowed.
B. The action is denied.
C. The user is prompted for MFA.
D. An error is returned.

Answer: B

Explanation: The default result of an IAM policy evaluation is a deny. If, after evaluating all applicable policies, there is no explicit `Allow` statement that matches the request, the request is denied. This is known as an implicit deny.

---

Question A company wants to provide its data scientists with access to a specific S3 bucket, but only when they are connected to the corporate VPN. The VPN has a static IP address range. How can this be enforced in the S3 bucket policy?

A. Use a statement with `"Effect": "Allow"` and a `Condition` checking the `aws:SourceIp` against the VPN's IP range.
B. Use a statement with `"Effect": "Deny"` and a `Condition` checking the `s3:LocationConstraint` against the VPN's IP range.
C. Use a statement with `"Effect": "DenyAllExcept"` the VPN's IP range.
D. Use a statement with `"Effect": "Allow"` and a `Principal` set to the VPN's IP range.

Answer: A

Explanation: The correct way to enforce access based on IP address is to use a `Condition` element. You would create a statement that allows the desired S3 actions, and add a condition block with the `IpAddress` condition operator and the `aws:SourceIp` key, providing the VPN's CIDR block as the value. IP addresses cannot be principals (D).

---

Question #: 98
What is the easiest way to determine which IAM user made a specific API call that resulted in an EC2 instance being terminated?

A. Check the IAM credential report.
B. Examine the EC2 instance's system logs.
C. Look for the `TerminateInstances` event in AWS CloudTrail logs.
D. Run the IAM Policy Simulator.

Answer: C

Explanation: AWS CloudTrail is the service that records API activity in your account. You can search the CloudTrail event history for the `TerminateInstances` event. The event details will include the user identity (the IAM user or role) that made the call, the source IP address, the time, and the resources affected.

---

Question #: 99
What is a "service-linked role"?

A. A role that links two AWS services together, such as Kinesis and Lambda.
B. A role that a user creates to delegate permissions to an AWS service.
C. A unique type of IAM role that is predefined by an AWS service and is linked to that service.
D. A role that is linked to an on-premises directory service.

Answer: C

Explanation: A service-linked role (SLR) is a role that an AWS service creates in your account on your behalf when you first use a feature that requires it (e.g., AWS Auto Scaling). The role is predefined with all the permissions the service needs to manage other AWS resources for you. You can't modify its permissions, only its deletion.

---

Question #: 100
An IAM user has two policies attached. Policy 1 allows `ec2:StartInstances` on all resources. Policy 2 denies `ec2:StartInstances` on all resources, but has a `Condition` that the instance must have the tag `Stage=Prod`. What can the user do?

A. The user can start any instance EXCEPT those tagged `Stage=Prod`.
B. The user can ONLY start instances tagged `Stage=Prod`.
C. The user cannot start any instances.
D. The user can start any instance, as the Allow overrides the conditional Deny.

Answer: A

Explanation: The evaluation logic will process both policies. The `Allow` statement in Policy 1 permits the action. However, the `Deny` statement in Policy 2 is also checked. If the instance being started has the tag `Stage=Prod`, the condition in the deny policy is met, and the explicit deny takes precedence, blocking the action. For any instance *without* that tag, the deny condition is not met, so the deny is not applied, and the original allow from Policy 1 takes effect.